import os
import requests
import zipfile
import shutil
import time
import logging
import sys

UPDATE_URL = "https://github.com/Boris-Pisarenko/Tangiblee_Proxy/raw/master/update.zip"
LOG_FILE = "mitmproxy.log"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def download_update():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ update.zip"""
    update_path = os.path.join(os.getcwd(), "update.zip")
    logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")

    try:
        response = requests.get(UPDATE_URL, timeout=30, stream=True)
        if response.status_code == 200:
            with open(update_path, "wb") as file:
                for chunk in response.iter_content(chunk_size=8192):
                    file.write(chunk)

            time.sleep(2)  
            if zipfile.is_zipfile(update_path):
                logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–∫ ZIP-–∞—Ä—Ö–∏–≤!")
                return update_path
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º!")
                os.remove(update_path)
                return None
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ö–æ–¥ {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return None

def extract_update(update_path):
    """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –∑–∞–º–µ–Ω–æ–π"""
    temp_dir = os.path.join(os.getcwd(), "update_temp")

    try:
       
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        os.mkdir(temp_dir)

        
        with zipfile.ZipFile(update_path, "r") as zip_ref:
            zip_ref.extractall(temp_dir)

        
        extracted_files = os.listdir(temp_dir)
        if not extracted_files:
            logging.error("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤.")
            return False

        logging.info(f"üìÇ –§–∞–π–ª—ã –≤ update_temp: {extracted_files}")

        
        for item in extracted_files:
            source_path = os.path.join(temp_dir, item)
            destination_path = os.path.join(os.getcwd(), item)

            
            if item == LOG_FILE:
                continue

            try:
                if os.path.exists(destination_path):
                    os.remove(destination_path)  
                shutil.move(source_path, destination_path)
                logging.info(f"üìÇ –§–∞–π–ª {item} –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {item}: {e}")

        
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ update_temp —É–¥–∞–ª–µ–Ω–∞")

        os.remove(update_path)

        logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return True

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def restart_app():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logging.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    time.sleep(3)
    python = sys.executable
    os.execl(python, python, *sys.argv)

def update_app():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    update_path = download_update()
    if update_path and extract_update(update_path):
        restart_app()