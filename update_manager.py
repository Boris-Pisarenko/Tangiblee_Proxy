import os
import sys
import time
import logging
import requests
import zipfile
import shutil
import subprocess
import psutil  # pip install psutil

UPDATE_URL = "https://github.com/Boris-Pisarenko/Tangiblee_Proxy/raw/master/update.zip"
LOG_FILE = "mitmproxy.log"
MAIN_EXE_NAME = "Tangiblee_Proxy.exe"  # –ò–º—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ exe –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏

DETACHED_PROCESS = 0x00000008

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

def download_update():
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–∫ update.zip"""
    update_path = os.path.join(os.getcwd(), "update.zip")
    logging.info("üîÑ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    try:
        response = requests.get(UPDATE_URL, timeout=30, stream=True)
        if response.status_code == 200:
            with open(update_path, "wb") as file:
                for chunk in response.iter_content(chunk_size=8192):
                    file.write(chunk)
            time.sleep(2)
            if zipfile.is_zipfile(update_path):
                logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–∞–∫ ZIP-–∞—Ä—Ö–∏–≤!")
                return update_path
            else:
                logging.error("‚ùå –û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-–∞—Ä—Ö–∏–≤–æ–º!")
                os.remove(update_path)
                return None
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è! –ö–æ–¥ {response.status_code}")
            return None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        return None

def extract_update(update_path):
    """–†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª—ã"""
    temp_dir = os.path.join(os.getcwd(), "update_temp")
    try:
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
        os.mkdir(temp_dir)
        with zipfile.ZipFile(update_path, "r") as zip_ref:
            zip_ref.extractall(temp_dir)
        extracted_files = os.listdir(temp_dir)
        if not extracted_files:
            logging.error("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª—ã –Ω–µ –±—ã–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω—ã! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ZIP-–∞—Ä—Ö–∏–≤.")
            return False
        logging.info(f"üìÇ –§–∞–π–ª—ã –≤ update_temp: {extracted_files}")
        for item in extracted_files:
            source_path = os.path.join(temp_dir, item)
            destination_path = os.path.join(os.getcwd(), item)
            if item == LOG_FILE:
                continue
            try:
                if os.path.exists(destination_path):
                    os.remove(destination_path)
                shutil.move(source_path, destination_path)
                logging.info(f"üìÇ –§–∞–π–ª {item} –æ–±–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {item}: {e}")
                return False
        if os.path.exists(temp_dir):
            shutil.rmtree(temp_dir)
            logging.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ update_temp —É–¥–∞–ª–µ–Ω–∞")
        os.remove(update_path)
        logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")
        return False

def kill_main_app():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω"""
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    for proc in psutil.process_iter(['pid', 'name']):
        try:
            if proc.info['name'] == MAIN_EXE_NAME:
                logging.info(f"–ù–∞–π–¥–µ–Ω –∑–∞–ø—É—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å {MAIN_EXE_NAME} —Å PID {proc.info['pid']}. –ó–∞–≤–µ—Ä—à–∞–µ–º –µ–≥–æ...")
                proc.kill()
                time.sleep(3)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {proc.info['name']}: {e}")

def start_main_app():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π exe –≤ –æ—Ç—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ (DETACHED_PROCESS)"""
    try:
        main_app_path = os.path.join(os.getcwd(), MAIN_EXE_NAME)
        if not os.path.exists(main_app_path):
            logging.error(f"–û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª {MAIN_EXE_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        logging.info("–ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        subprocess.Popen([main_app_path], creationflags=DETACHED_PROCESS)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")

def update_app():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å, –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    kill_main_app()
    update_path = download_update()
    if update_path and extract_update(update_path):
        logging.info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ.")
        start_main_app()
    else:
        logging.error("‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å.")

if __name__ == "__main__":
    update_app()
