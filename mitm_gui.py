import subprocess
import sys
import os
import logging
import time
import psutil
from PyQt6.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout, QLabel,
    QCheckBox, QLineEdit, QTextEdit, QMenuBar, QMenu, QMessageBox
)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QPalette, QColor, QIcon

VERSION = "1.0.5"

LOG_FILE = "mitmproxy.log"
MITMPROXY_INSTALLER = "mitmproxy-11.1.0-windows-x86_64-installer.exe"
MODIFY_SCRIPT = "modify_url.py"
INJECT_SCRIPT = "inject_script.py"
MITMPROXY_PROCESS_NAME = "mitmweb.exe"
UPDATE_MANAGER = "update_manager.exe"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)


class ProxyGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(f"Tangiblee_Proxy v{VERSION}")
        self.setWindowIcon(QIcon("icons8-qa-64.ico"))
        self.setFixedWidth(800)  

        self.menu_bar = QMenuBar(self)
        self.menu = QMenu("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ", self)
        self.menu_bar.addMenu(self.menu)

        self.update_action = self.menu.addAction("–û–±–Ω–æ–≤–∏—Ç—å")
        self.cert_action = self.menu.addAction("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã mitmproxy")
        self.install_mitmproxy_action = self.menu.addAction(f"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {MITMPROXY_INSTALLER}")

        self.update_action.triggered.connect(self.manual_update)
        self.cert_action.triggered.connect(self.install_certificates)
        self.install_mitmproxy_action.triggered.connect(self.install_mitmproxy)

        self.label = QLabel(f"–ü—Ä–æ–∫—Å–∏: –≤—ã–∫–ª—é—á–µ–Ω (v{VERSION})", self)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.set_status_color("red")

        self.simple_proxy_checkbox = QCheckBox("–ó–∞–ø—É—Å—Ç–∏—Ç—å Mitmproxy Web UI (mitmweb)", self)
        self.staging_checkbox = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Staging –≤–º–µ—Å—Ç–æ PROD", self)
        self.inject_checkbox = QCheckBox("–ó–∞–ø—É—Å–∫ Inject Script", self)

        self.domain_input = QLineEdit(self)
        self.domain_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (example.com)")

        self.script_input = QTextEdit(self)
        self.script_input.setPlaceholderText(
            '–í–≤–µ–¥–∏—Ç–µ —Å–Ω–∏–ø–µ—Ç –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏ –ø—Ä–∏–º–µ—Ä: '
            '<script async src="https://cdn.tangiblee.com/integration/5.0/managed/samsonite.com.co/revision_1/'
            'variation_original/tangiblee-bundle.min.js"></script>'
        )

        self.start_button = QPushButton("–°—Ç–∞—Ä—Ç", self)
        self.stop_button = QPushButton("–°—Ç–æ–ø", self)

        layout = QVBoxLayout()
        layout.setMenuBar(self.menu_bar)
        layout.addWidget(self.label)
        layout.addWidget(self.simple_proxy_checkbox)
        layout.addWidget(self.staging_checkbox)
        layout.addWidget(self.inject_checkbox)
        layout.addWidget(QLabel("–î–æ–º–µ–Ω –¥–ª—è Inject Script:"))
        layout.addWidget(self.domain_input)
        layout.addWidget(QLabel("JavaScript-–∫–æ–¥:"))
        layout.addWidget(self.script_input)
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)

        self.setLayout(layout)

        self.start_button.clicked.connect(self.start_proxy)
        self.stop_button.clicked.connect(self.stop_proxy)

        self.mitm_process = None
        logging.info(f"–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Tangiblee_Proxy –≤–µ—Ä—Å–∏–∏ {VERSION}")

    def set_status_color(self, color):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        palette = self.label.palette()
        palette.setColor(QPalette.ColorRole.WindowText, QColor("green" if color == "green" else "red"))
        self.label.setPalette(palette)

    def configure_windows_proxy(self, enable=True):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä –≤ Windows"""
        try:
            if enable:
                subprocess.run(
                    'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                    '/v ProxyEnable /t REG_DWORD /d 1 /f',
                    shell=True, check=True)
                subprocess.run(
                    'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                    '/v ProxyServer /t REG_SZ /d "127.0.0.1:8080" /f',
                    shell=True, check=True)
                logging.info("‚úÖ –ü—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω –≤ Windows")

            else:
                subprocess.run(
                    'reg add "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                    '/v ProxyEnable /t REG_DWORD /d 0 /f',
                    shell=True, check=True)

                try:
                    subprocess.run(
                        'reg delete "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings" '
                        '/v ProxyServer /f',
                        shell=True, check=True)
                except subprocess.CalledProcessError as err:
                    logging.warning(f"–ö–ª—é—á ProxyServer —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {err}")

                logging.info("‚úÖ –ü—Ä–æ–∫—Å–∏ –≤—ã–∫–ª—é—á–µ–Ω –≤ Windows")

        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏: {e}")


    def install_mitmproxy(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫—É mitmproxy"""
        if os.path.exists(MITMPROXY_INSTALLER):
            subprocess.Popen([MITMPROXY_INSTALLER], shell=True)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"{MITMPROXY_INSTALLER} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    def install_certificates(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç mitmproxy –ø–µ—Ä–µ–¥ —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        if not self.simple_proxy_checkbox.isChecked():
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∫–ª—é—á–∏—Ç—å mitmproxy!")
            return

        self.start_proxy()
        time.sleep(5)
        subprocess.run(["cmd", "/c", "start", "http://mitm.it/"])

    def start_proxy(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç mitmproxy"""
        scripts = []

        if self.simple_proxy_checkbox.isChecked():
            self.configure_windows_proxy(True)
            self.mitm_process = subprocess.Popen(["mitmweb"])
            self.label.setText("‚úÖ mitmproxy Web UI –í–ö–õ–Æ–ß–ï–ù")
            self.set_status_color("green")
            return

        if self.staging_checkbox.isChecked():
            if os.path.exists(MODIFY_SCRIPT):
                scripts.append(MODIFY_SCRIPT)
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª {MODIFY_SCRIPT} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        if self.inject_checkbox.isChecked():
            if not self.domain_input.text().strip() or not self.script_input.toPlainText().strip():
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏ —Å–Ω–∏–ø–µ—Ç –¥–ª—è –∏–Ω—ä–µ–∫—Ü–∏–∏!")
                return
            if os.path.exists(INJECT_SCRIPT):
                scripts.append(INJECT_SCRIPT)
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–§–∞–π–ª {INJECT_SCRIPT} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        if not scripts:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ mitmproxy!")
            return

        self.configure_windows_proxy(True)

        try:
            command = ["mitmweb", "-s"] + scripts
            self.mitm_process = subprocess.Popen(command)
            self.label.setText("‚úÖ –ü—Ä–æ–∫—Å–∏ –í–ö–õ–Æ–ß–ï–ù")
            self.set_status_color("green")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ mitmproxy!")

    def stop_proxy(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç mitmproxy"""
        try:
            for proc in psutil.process_iter(attrs=['pid', 'name']):
                if proc.info["name"] == MITMPROXY_PROCESS_NAME:
                    proc.kill()
                    logging.info(f"üî¥ –ü—Ä–æ—Ü–µ—Å—Å {MITMPROXY_PROCESS_NAME} —É–±–∏—Ç")

            self.configure_windows_proxy(False)
            self.label.setText("üî¥ –ü—Ä–æ–∫—Å–∏ –í–´–ö–õ–Æ–ß–ï–ù")
            self.set_status_color("red")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ–∫—Å–∏: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ mitmproxy!")

    def manual_update(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        if os.path.exists(UPDATE_MANAGER):
            subprocess.Popen([UPDATE_MANAGER], shell=True)
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"{UPDATE_MANAGER} –Ω–µ –Ω–∞–π–¥–µ–Ω!")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ProxyGUI()
    window.show()
    sys.exit(app.exec())
