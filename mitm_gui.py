import subprocess
import sys
import os
import logging
import json
from PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QLabel, QCheckBox, QLineEdit, QTextEdit
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QPalette, QColor, QIcon

LOG_FILE = "mitmproxy.log"
SCRIPT_STORAGE_FILE = "inject_scripts.json"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

class ProxyGUI(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Tangiblee_Proxy")
        self.setWindowIcon(QIcon("icons8-qa-64.ico"))

        # –°—Ç–∞—Ç—É—Å –ø—Ä–æ–∫—Å–∏
        self.label = QLabel("–ü—Ä–æ–∫—Å–∏: –≤—ã–∫–ª—é—á–µ–Ω", self)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.set_status_color("red")

        # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–æ–≤
        self.staging_checkbox = QCheckBox("–ü–æ–¥–º–µ–Ω–∞ –¥–ª—è staging PROD", self)
        self.inject_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å Inject Script", self)

        # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ–º–µ–Ω–∞ –∏ —Å–∫—Ä–∏–ø—Ç–∞
        self.domain_input = QLineEdit(self)
        self.domain_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (example.com)")

        self.script_input = QTextEdit(self)
        self.script_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ JavaScript-–∫–æ–¥ –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∫—Å–∏
        self.start_button = QPushButton("–°—Ç–∞—Ä—Ç", self)
        self.stop_button = QPushButton("–°—Ç–æ–ø", self)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        self.cert_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã mitmproxy", self)
        self.cert_button.clicked.connect(self.open_certificates_page)

        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.staging_checkbox)
        layout.addWidget(self.inject_checkbox)
        layout.addWidget(QLabel("–î–æ–º–µ–Ω –¥–ª—è Inject Script:"))
        layout.addWidget(self.domain_input)
        layout.addWidget(QLabel("JavaScript-–∫–æ–¥:"))
        layout.addWidget(self.script_input)
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)
        layout.addWidget(self.cert_button, alignment=Qt.AlignmentFlag.AlignCenter)

        self.setLayout(layout)

        self.start_button.clicked.connect(self.start_proxy)
        self.stop_button.clicked.connect(self.stop_proxy)

        self.mitm_process = None

    def set_status_color(self, color):
        palette = self.label.palette()
        palette.setColor(QPalette.ColorRole.WindowText, QColor("green" if color == "green" else "red"))
        self.label.setPalette(palette)

    def start_proxy(self):
        scripts = []

        if self.staging_checkbox.isChecked():
            scripts.append("modify_url.py")

        if self.inject_checkbox.isChecked():
            if not self.domain_input.text().strip() or not self.script_input.toPlainText().strip():
                self.label.setText("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏ —Å–∫—Ä–∏–ø—Ç!")
                self.set_status_color("red")
                return

            self.update_inject_script()
            scripts.append("inject_script.py")

        if not scripts:
            self.label.setText("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç!")
            self.set_status_color("red")
            return

        try:
            subprocess.run([
                "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
                "/v", "ProxyEnable", "/t", "REG_DWORD", "/d", "1", "/f"
            ], check=True)

            subprocess.run([
                "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
                "/v", "ProxyServer", "/t", "REG_SZ", "/d", "127.0.0.1:8080", "/f"
            ], check=True)

            command = ["mitmweb", "-s"] + scripts
            self.mitm_process = subprocess.Popen(command)

            self.label.setText("‚úÖ –ü—Ä–æ–∫—Å–∏ –í–ö–õ–Æ–ß–ï–ù")
            self.set_status_color("green")

        except Exception as e:
            self.label.setText("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!")
            self.set_status_color("red")

    def stop_proxy(self):
        if self.mitm_process:
            self.mitm_process.terminate()
            self.mitm_process = None

        subprocess.run(["taskkill", "/F", "/IM", "mitmweb.exe"])

        subprocess.run([
            "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
            "/v", "ProxyEnable", "/t", "REG_DWORD", "/d", "0", "/f"
        ], check=True)

        self.label.setText("üî¥ –ü—Ä–æ–∫—Å–∏ –í–´–ö–õ–Æ–ß–ï–ù")
        self.set_status_color("red")

    def update_inject_script(self):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π Inject Script –≤ `inject_scripts.json`
        **–ë–ï–ó –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞**.
        """
        domain = self.domain_input.text().strip()
        script_code = self.script_input.toPlainText().strip()

        if not domain or not script_code:
            logging.error("–û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è Inject Script!")
            return

        if os.path.exists(SCRIPT_STORAGE_FILE):
            with open(SCRIPT_STORAGE_FILE, "r", encoding="utf-8") as file:
                try:
                    data = json.load(file)
                except json.JSONDecodeError:
                    data = {}
        else:
            data = {}

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 1-–≤-1 –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        data[domain] = script_code  

        with open(SCRIPT_STORAGE_FILE, "w", encoding="utf-8") as file:
            json.dump(data, file, indent=4, ensure_ascii=False)

        logging.info(f"‚úÖ –ù–æ–≤—ã–π Inject Script –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è {domain}")

    def open_certificates_page(self):
        subprocess.run(["cmd", "/c", "start", "http://mitm.it/"])

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ProxyGUI()
    window.show()
    sys.exit(app.exec())
