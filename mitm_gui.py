import subprocess
import sys
import os
import logging
import json
import time
from PyQt6.QtWidgets import QApplication, QWidget, QPushButton, QVBoxLayout, QLabel, QCheckBox, QLineEdit, QTextEdit
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QPalette, QColor, QIcon
import update_manager  
import mitm_proxy_runner  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª

LOG_FILE = "mitmproxy.log"
SCRIPT_STORAGE_FILE = "inject_scripts.json"

logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)


class ProxyGUI(QWidget):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Tangiblee_Proxy")
        self.setWindowIcon(QIcon("icons8-qa-64.ico"))

        self.label = QLabel("–ü—Ä–æ–∫—Å–∏: –≤—ã–∫–ª—é—á–µ–Ω", self)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.set_status_color("red")

        # –ù–æ–≤–∞—è –≥–∞–ª–æ—á–∫–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ mitmproxy
        self.simple_proxy_checkbox = QCheckBox("–ü—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏—Ç—å mitmproxy", self)

        self.staging_checkbox = QCheckBox("–ü–æ–¥–º–µ–Ω–∞ –¥–ª—è staging PROD", self)
        self.inject_checkbox = QCheckBox("–í–∫–ª—é—á–∏—Ç—å Inject Script", self)

        self.domain_input = QLineEdit(self)
        self.domain_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (example.com)")

        self.script_input = QTextEdit(self)
        self.script_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ JavaScript-–∫–æ–¥ –¥–ª—è –∏–Ω–∂–µ–∫—Ü–∏–∏")

        self.start_button = QPushButton("–°—Ç–∞—Ä—Ç", self)
        self.stop_button = QPushButton("–°—Ç–æ–ø", self)
        self.update_button = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")

        self.cert_button = QPushButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã mitmproxy", self)
        self.cert_button.clicked.connect(self.open_certificates_page)

        layout = QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.simple_proxy_checkbox)  # –ù–æ–≤–∞—è –≥–∞–ª–æ—á–∫–∞
        layout.addWidget(self.staging_checkbox)
        layout.addWidget(self.inject_checkbox)
        layout.addWidget(QLabel("–î–æ–º–µ–Ω –¥–ª—è Inject Script:"))
        layout.addWidget(self.domain_input)
        layout.addWidget(QLabel("JavaScript-–∫–æ–¥:"))
        layout.addWidget(self.script_input)
        layout.addWidget(self.start_button)
        layout.addWidget(self.stop_button)
        layout.addWidget(self.update_button)
        layout.addWidget(self.cert_button, alignment=Qt.AlignmentFlag.AlignCenter)

        self.setLayout(layout)

        self.start_button.clicked.connect(self.start_proxy)
        self.stop_button.clicked.connect(self.stop_proxy)
        self.update_button.clicked.connect(update_manager.update_app)  

        self.mitm_process = None

    def set_status_color(self, color):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        palette = self.label.palette()
        palette.setColor(QPalette.ColorRole.WindowText, QColor("green" if color == "green" else "red"))
        self.label.setPalette(palette)

    def start_proxy(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç mitmproxy —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –≥–∞–ª–æ—á–∫–∞ "–ü—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∏—Ç—å mitmproxy"
        if self.simple_proxy_checkbox.isChecked():
            mitm_proxy_runner.start_mitmproxy_simple()
            self.label.setText("‚úÖ mitmproxy –í–ö–õ–Æ–ß–ï–ù (–±–µ–∑ —Å–∫—Ä–∏–ø—Ç–æ–≤)")
            self.set_status_color("green")
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤

        scripts = []

        if self.staging_checkbox.isChecked():
            scripts.append("modify_url.py")

        if self.inject_checkbox.isChecked():
            if not self.domain_input.text().strip() or not self.script_input.toPlainText().strip():
                self.label.setText("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –∏ —Å–∫—Ä–∏–ø—Ç!")
                self.set_status_color("red")
                return

            self.update_inject_script()
            scripts.append("inject_script.py")

        if not scripts:
            self.label.setText("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–∫—Ä–∏–ø—Ç!")
            self.set_status_color("red")
            return

        try:
            subprocess.run([
                "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
                "/v", "ProxyEnable", "/t", "REG_DWORD", "/d", "1", "/f"
            ], check=True)

            subprocess.run([
                "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
                "/v", "ProxyServer", "/t", "REG_SZ", "/d", "127.0.0.1:8080", "/f"
            ], check=True)

            command = ["mitmweb", "-s"] + scripts
            self.mitm_process = subprocess.Popen(command)

            self.label.setText("‚úÖ –ü—Ä–æ–∫—Å–∏ –í–ö–õ–Æ–ß–ï–ù")
            self.set_status_color("green")

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            self.label.setText("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞!")
            self.set_status_color("red")

    def stop_proxy(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç mitmproxy"""
        if self.mitm_process:
            self.mitm_process.terminate()
            self.mitm_process = None

        subprocess.run(["taskkill", "/F", "/IM", "mitmweb.exe"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

        subprocess.run([
            "reg", "add", "HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Internet Settings",
            "/v", "ProxyEnable", "/t", "REG_DWORD", "/d", "0", "/f"
        ], check=True)

        self.label.setText("üî¥ –ü—Ä–æ–∫—Å–∏ –í–´–ö–õ–Æ–ß–ï–ù")
        self.set_status_color("red")

    def open_certificates_page(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        subprocess.run(["cmd", "/c", "start", "http://mitm.it/"])

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = ProxyGUI()
    window.show()
    sys.exit(app.exec())
